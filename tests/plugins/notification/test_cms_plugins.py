"""Testing DjangoCMS plugin declaration for Richie's notifications plugin."""
from django.test import TestCase
from django.test.client import RequestFactory

from cms.api import add_plugin
from cms.models import Placeholder
from cms.plugin_rendering import ContentRenderer

from richie.plugins.notification.cms_plugins import NotificationPlugin
from richie.plugins.notification.factories import NotificationFactory


class NotificationPluginTestCase(TestCase):
    """Test suite for the notification plugin."""

    def test_cms_plugins_notification_context_and_html(self):
        """
        Instanciating this plugin with an instance should populate the context
        and render in the template.
        """
        placeholder = Placeholder.objects.create(slot="test")

        # Create random values for parameters with a factory
        notification = NotificationFactory()
        fields_list = [
            "title",
            "message",
            "template",
        ]

        model_instance = add_plugin(
            placeholder,
            NotificationPlugin,
            "en",
            **{field: getattr(notification, field) for field in fields_list},
        )
        plugin_instance = model_instance.get_plugin_class_instance()
        context = plugin_instance.render({}, model_instance, None)

        # Check if "instance" is in context
        self.assertIn("instance", context)

        # Check if parameters, generated by the factory, are correctly set in "instance" of context
        self.assertEqual(context["instance"].title, notification.title)
        self.assertEqual(context["instance"].message, notification.message)
        self.assertEqual(context["instance"].template, notification.template)

        # Get generated html for plain text body
        renderer = ContentRenderer(request=RequestFactory())
        html = renderer.render_plugin(model_instance, {})

        # Check rendered body is correct after save and sanitize
        self.assertIn(notification.title, html)
        self.assertIn(notification.message, html)
        self.assertIn(notification.template, html)

    def test_cms_plugins_notification_info_template(self):
        """
        Instanciating this plugin with an instance to populate the context
        """
        placeholder = Placeholder.objects.create(slot="test")

        # Create random values for parameters with a factory with an info template
        notification = NotificationFactory(template="info")
        fields_list = [
            "title",
            "message",
            "template",
        ]

        model_instance = add_plugin(
            placeholder,
            NotificationPlugin,
            "en",
            **{field: getattr(notification, field) for field in fields_list},
        )

        # Get the generated html
        renderer = ContentRenderer(request=RequestFactory())
        html = renderer.render_plugin(model_instance, {})

        # Check that all expected elements are in the html
        self.assertIn('class="notification-alert__wrapper info"', html)
        self.assertIn('class="notification-alert__icon"', html)
        self.assertTrue('id="info-icon"' in html)

    def test_cms_plugins_notification_warn_template(self):
        """
        Instanciating this plugin with an instance to populate the context
        """
        placeholder = Placeholder.objects.create(slot="test")

        # Create random values for parameters with a factory with a warning template
        notification = NotificationFactory(template="warning")
        fields_list = [
            "title",
            "message",
            "template",
        ]

        model_instance = add_plugin(
            placeholder,
            NotificationPlugin,
            "en",
            **{field: getattr(notification, field) for field in fields_list},
        )

        # Get the generated html
        renderer = ContentRenderer(request=RequestFactory())
        html = renderer.render_plugin(model_instance, {})

        # Check that all expected elements are in the html
        self.assertIn('class="notification-alert__wrapper warning"', html)
        self.assertIn('class="notification-alert__icon"', html)
        self.assertTrue('id="warn-icon"' in html)
