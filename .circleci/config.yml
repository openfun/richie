# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > sandbox/version.json

version: 2
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      # Make sure the changes don't add a "print" statement to the code base.
      # We should exclude the ".circleci" folder from the search as the very command that checks
      # the absence of "print" is including a "print(" itself.
      - run:
          name: enforce absence of print statements in code
          command: |
            ! git diff origin/master..HEAD -- . ':(exclude).circleci' | grep "print("
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install requests gitlint
      - run:
          name: lint commit messages added to master
          command: |
            gitlint --commits origin/master..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Docker/back-end jobs
  # Build job
  # Build the Docker image ready for production
  build:
    # We use the machine executor, i.e. a VM, not a container
    machine:
      # Cache docker layers so that we strongly speed up this job execution
      docker_layer_caching: true
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            docker build \
              -t richie:${CIRCLE_SHA1} \
              .
      - run:
          name: Check built image availability
          command: docker images "richie:${CIRCLE_SHA1}*"
      # Since we cannot rely on CircleCI's Docker layers cache (for obscure
      # reasons some subsequent jobs will benefit from a previous job cache and
      # some others won't), we choose to save built docker images in cached
      # directories. This ensures that we will be able to load built docker
      # images in subsequent jobs.
      - run:
          name: Store docker image in cache
          command: |
            docker save \
              -o docker/images/richie.tar \
              richie:${CIRCLE_SHA1}
      - save_cache:
          paths:
            - ~/fun/docker/images/
          key: docker-debian-images-{{ .Revision }}

  # Build CI job
  # Build the Docker image ready for the CI
  build-ci:
    machine:
      docker_layer_caching: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/richie.tar
      - run:
          name: List available images
          command: docker images "richie:${CIRCLE_SHA1}*"
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # CI image build, it uses the dev Dockerfile file
      - run:
          name: Build CI image
          command: |
            docker build \
              -t richie:${CIRCLE_SHA1}-ci \
              -f docker/images/ci/Dockerfile \
              --build-arg BASE_TAG=${CIRCLE_SHA1} \
              .
      - run:
          name: Check built image availability
          command: docker images "richie:${CIRCLE_SHA1}*"
      - run:
          name: Store docker image in cache
          command: |
            docker save \
              -o docker/images/dev/richie.tar \
              richie:${CIRCLE_SHA1} \
              richie:${CIRCLE_SHA1}-ci
      - save_cache:
          paths:
            - ~/fun/docker/images/dev/
          key: docker-debian-images-ci-{{ .Revision }}
      # Generate and persist the translations base file
      - run:
          name: Generate a POT file from strings extracted from the project
          command: |
            docker run --rm \
              --user="$(id -u)" \
              --volume "$PWD:/app" \
              --workdir /app/src/richie \
              "richie:${CIRCLE_SHA1}-ci" \
                  python /app/sandbox/manage.py makemessages --keep-pot
      - persist_to_workspace:
          root: ~/fun
          paths:
            - src/richie/locale/django.pot

  lint-back-isort:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-ci-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/richie.tar
      - run:
          name: Lint code with isort
          command: |
            docker-compose \
              -p richie-ci \
              -f docker/compose/ci/postgresql/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps app \
                isort --recursive --check-only .

  lint-back-flake8:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-ci-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/richie.tar
      - run:
          name: Lint code with flake8
          command: |
            docker-compose \
              -p richie-ci \
              -f docker/compose/ci/postgresql/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps app \
                flake8

  lint-back-pylint:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-ci-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/richie.tar
      - run:
          name: Lint code with pylint
          command: |
            docker-compose \
              -p richie-ci \
              -f docker/compose/ci/postgresql/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps app \
                pylint src/richie/apps src/richie/plugins sandbox tests

  lint-back-black:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-ci-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/richie.tar
      - run:
          name: Lint code with black
          command: |
            docker-compose \
              -p richie-ci \
              -f docker/compose/ci/postgresql/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps app \
                black src/richie/apps src/richie/plugins sandbox tests --check

  # Restore front & back POT files containing strings to translate and upload them to our
  # translation management tool
  upload-i18n-strings:
    machine:
      docker_layer_caching: true
    working_directory: ~/fun
    steps:
      - checkout
      - attach_workspace:
          at: ~/fun
      - run:
          name: upload files to crowdin
          command: |
            docker-compose \
              -p richie-test \
              -f docker/compose/ci/postgresql/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps crowdin \
                -c crowdin/config.yml upload sources

  test-back-mysql:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-ci-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/richie.tar
      # ElasticSearch configuration
      #
      # We need to increase the VM max memory size, or else, ElasticSearch (ES)
      # service won't bootstrap.
      #
      # Source:
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-cli-run-prod-mode
      - run:
          name: Increase VM max memory size for ES
          command: |
            sudo sysctl -w vm.max_map_count=262144
            sudo sysctl vm.max_map_count
      # Run back-end (Django) test suite
      #
      # Nota bene: to run the django test suite, we need to ensure that both
      # MySQL and ElasticSearch services are up and ready. To achieve this, we
      # wrap the pytest command execution with dockerize, a tiny tool installed
      # in the CI image. In our case, dockerize will wait up to one minute that
      # both the database and elastisearch containers opened their expected tcp
      # port (3306 and 9200 resp.).
      - run:
          name: Run tests
          command: |
            touch env.d/development/crowdin && \
            docker-compose \
              -p richie-ci \
              -f docker/compose/ci/mysql/docker-compose.yml \
              --project-directory . \
              run --rm app \
                dockerize \
                  -wait tcp://db:3306 \
                  -wait tcp://elasticsearch:9200 \
                  -timeout 60s \
                    pytest
            docker-compose -p richie-ci ps db | grep "mysql"

  test-back-postgresql:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-ci-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/richie.tar
      # ElasticSearch configuration
      #
      # We need to increase the VM max memory size, or else, ElasticSearch (ES)
      # service won't bootstrap.
      #
      # Source:
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-cli-run-prod-mode
      - run:
          name: Increase VM max memory size for ES
          command: |
            sudo sysctl -w vm.max_map_count=262144
            sudo sysctl vm.max_map_count
      # Run back-end (Django) test suite
      #
      # Nota bene: to run the django test suite, we need to ensure that both
      # PostgreSQL and ElasticSearch services are up and ready. To achieve this,
      # we wrap the pytest command execution with dockerize, a tiny tool
      # installed in the CI image. In our case, dockerize will wait up to one
      # minute that both the database and elastisearch containers opened their
      # expected tcp port (5432 and 9200 resp.).
      - run:
          name: Run tests
          command: |
            touch env.d/development/crowdin && \
            docker-compose \
              -p richie-ci \
              -f docker/compose/ci/postgresql/docker-compose.yml \
              --project-directory . \
              run --rm app \
                dockerize \
                  -wait tcp://db:5432 \
                  -wait tcp://elasticsearch:9200 \
                  -timeout 60s \
                    pytest
            docker-compose -p richie-ci ps db | grep "postgres"

  # ---- Alpine jobs ----
  build-alpine:
    machine:
      docker_layer_caching: true
    working_directory: ~/fun
    steps:
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      - run:
          name: Build alpine production image
          command: |
            docker build \
              -t richie:${CIRCLE_SHA1}-alpine \
              -f docker/images/alpine/Dockerfile \
              .
      - run:
          name: Build alpine CI image
          command: |
            docker build \
              -t richie:${CIRCLE_SHA1}-alpine-ci \
              -f docker/images/alpine/ci/Dockerfile \
              --build-arg BASE_TAG=${CIRCLE_SHA1}-alpine \
              .
      - run:
          name: List available images
          command: docker images richie
      - run:
          name: Store docker image in cache
          command: |
            docker save \
              -o docker/images/alpine/richie.tar \
              richie:${CIRCLE_SHA1}-alpine \
              richie:${CIRCLE_SHA1}-alpine-ci
      - save_cache:
          paths:
            - ~/fun/docker/images/
          key: docker-alpine-images-ci-{{ .Revision }}

  test-alpine:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-alpine-images-ci-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/alpine/richie.tar
      - run:
          name: Increase VM max memory size
          command: |
            sudo sysctl -w vm.max_map_count=262144
            sudo sysctl vm.max_map_count
      - run:
          name: Run tests
          command: |
            IMAGE_SUFFIX="-alpine" \
            docker-compose \
              -p richie-alpine-ci \
              -f docker/compose/ci/postgresql/docker-compose.yml \
              --project-directory . \
              run --rm app \
                dockerize \
                  -wait tcp://db:5432 \
                  -wait tcp://elasticsearch:9200 \
                  -timeout 60s \
                    pytest

  # ---- Packaging jobs ----
  package-back:
    docker:
      - image: circleci/python:3.7-stretch
    working_directory: ~/fun
    steps:
      - checkout
      # Ensure we restore frontend production builds in Richie's static
      # directory
      - attach_workspace:
          at: ~/fun
      - run:
          name: Build python package
          command: python setup.py sdist bdist_wheel
      # Persist build packages to the workspace
      - persist_to_workspace:
          root: ~/fun
          paths:
            - dist
      # Store packages as artifacts to download/test them
      - store_artifacts:
          path: ~/fun/dist

  # Publishing to PyPI requires that:
  #   * you already registered to pypi.org
  #   * you have define both the TWINE_USERNAME & TWINE_PASSWORD secret
  #     environment variables in CircleCI UI (with your PyPI credentials)
  pypi:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-ci-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/richie.tar
      # Restore built python packages
      - attach_workspace:
          at: ~/fun
      - run:
          name: List built packages
          command: ls dist/*
      - run:
          name: Upload built packages to PyPI
          command: |
            docker-compose \
              -p richie-ci \
              -f docker/compose/ci/postgresql/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps \
                --user="$(id -u)" \
                --volume="$PWD:/app" \
                -e TWINE_USERNAME \
                -e TWINE_PASSWORD \
                app \
                twine upload dist/*

  # ---- DockerHub publication job ----
  hub:
    machine: true
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-ci-{{ .Revision }}
      - restore_cache:
          keys:
            - docker-alpine-images-ci-{{ .Revision }}
      # Load all built images in all flavors
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/richie.tar
            docker load < docker/images/alpine/richie.tar
      # Login to DockerHub to Publish new images
      #
      # Nota bene: you'll need to define the following secrets environment vars
      # in CircleCI interface:
      #
      #   - DOCKER_USER
      #   - DOCKER_PASS
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-alpine)(-ci)
      - run:
          name: Tag images
          command: |
            docker images fundocker/richie
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag richie:${CIRCLE_SHA1} fundocker/richie:${DOCKER_TAG}
            docker tag richie:${CIRCLE_SHA1}-alpine fundocker/richie:${DOCKER_TAG}-alpine
            if [[ -n "$CIRCLE_TAG" ]]; then
                docker tag richie:${CIRCLE_SHA1} fundocker/richie:latest
                docker tag richie:${CIRCLE_SHA1}-alpine fundocker/richie:alpine
            fi
            docker images | grep -E "^fundocker/richie\s*(${DOCKER_TAG}.*|latest|alpine|master|master-alpine)"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/richie:${DOCKER_TAG}
            docker push fundocker/richie:${DOCKER_TAG}-alpine
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/richie:latest
              docker push fundocker/richie:alpine
            fi

  # ---- Front-end jobs ----
  build-front:
    docker:
      - image: circleci/node:10
    working_directory: ~/fun/src/frontend
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v5-front-dependencies-{{ checksum "yarn.lock" }}
            - v5-front-dependencies-
      # If the yarn.lock file is not up-to-date with the package.json file,
      # using the --frozen-lockfile should fail.
      - run:
          name: Install front-end dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Build front-end application
          command: yarn build
      - run:
          name: Build application styles
          command: yarn sass
      - run:
          name: Use react-intl-po to generate our frontend.pot file
          command: yarn generate-l10n-template
      - persist_to_workspace:
          root: ~/fun
          paths:
            - src/frontend/i18n/frontend.pot
      - save_cache:
          paths:
            - ./node_modules
          key: v5-front-dependencies-{{ checksum "yarn.lock" }}

  build-front-production:
    docker:
      - image: circleci/node:10
    working_directory: ~/fun/src/frontend
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v5-front-dependencies-{{ checksum "yarn.lock" }}
            - v5-front-dependencies-
      - run:
          name: Build front-end application in production mode
          command: yarn build-production
      - run:
          name: Build application styles in production mode
          command: yarn sass-production
      - run:
          name: List builds
          command: |
            echo "== Javascript =="
            ls ../richie/static/richie/js/*.js
            echo "== CSS =="
            ls ../richie/static/richie/css/*.css
      - persist_to_workspace:
          root: ~/fun
          paths:
            - src/richie/static/richie/js/*.js
            - src/richie/static/richie/css/*.css

  lint-front-tslint:
    docker:
      - image: circleci/node:10
    working_directory: ~/fun/src/frontend
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v5-front-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Lint code with tslint
          command: yarn lint

  lint-prettier:
    docker:
      - image: circleci/node:10
    working_directory: ~/fun/src/frontend
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v5-front-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Lint JS/TS/JSON and CSS/SCSS code with prettier
          command: yarn prettier --list-different "js/**/*.+(ts|tsx|json|js|jsx)" "*.+(ts|tsx|json|js|jsx)" "**/*.+(css|scss)"

  test-front:
    docker:
      - image: circleci/node:10
    working_directory: ~/fun/src/frontend
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v5-front-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Run tests
          # Circle CI needs the tests to be ran sequentially, otherwise it hangs. See Jest docs below:
          # (https://jestjs.io/docs/en/troubleshooting#tests-are-extremely-slow-on-docker-and-or-continuous-integration-ci-server)
          command: yarn test --runInBand

  test-front-package:
    docker:
      - image: circleci/node:10
    working_directory: ~/wrk
    steps:
      - checkout:
          path: ~/fun
      - run:
          name: Check SCSS library
          command: |
            # Install the sass library/compiler
            yarn add node-sass
            # Install the package locally
            yarn add file:/home/circleci/fun/src/frontend
            # Create a scss file to compile that imports the package main entry
            echo -e "@import 'richie-education/scss/main';\n" > main.scss
            # Compile it!
            yarn node-sass --include-path node_modules main.scss main.css

  # Publishing to npm requires that:
  #   * you already registered to pypi.org
  #   * you have define the NPM_TOKEN secret environment variables in CircleCI
  #     UI (with your PyPI credentials)
  npm:
    docker:
      - image: circleci/node:10
    working_directory: ~/fun
    steps:
      - checkout:
          path: ~/fun
      - restore_cache:
          keys:
            - v5-front-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/fun/.npmrc
      - run:
          name: Publish package
          command: npm publish src/frontend

workflows:
  version: 2

  richie:
    jobs:
      # Front-end jobs
      #
      # Build, lint and test the front-end apps
      - build-front:
          filters:
            tags:
              only: /.*/
      - build-front-production:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - lint-front-tslint:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - lint-prettier:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - test-front:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - test-front-package:
          filters:
            tags:
              only: /.*/

      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build:
          filters:
            tags:
              only: /.*/
      - build-ci:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - lint-back-black:
          requires:
            - build-ci
          filters:
            tags:
              only: /.*/
      - lint-back-isort:
          requires:
            - build-ci
          filters:
            tags:
              only: /.*/
      - lint-back-flake8:
          requires:
            - build-ci
          filters:
            tags:
              only: /.*/
      - lint-back-pylint:
          requires:
            - build-ci
          filters:
            tags:
              only: /.*/
      - test-back-mysql:
          requires:
            - build-ci
          filters:
            tags:
              only: /.*/
      - test-back-postgresql:
          requires:
            - build-ci
          filters:
            tags:
              only: /.*/

      # i18n jobs
      #
      # Extract strings and upload them to our translation management SaaS
      - upload-i18n-strings:
          requires:
            - build-front
            - build-ci
          filters:
            branches:
              only: master

      # Docker alpine jobs
      #
      # Build and run tests in alpine based images
      - build-alpine:
          filters:
            tags:
              only: /.*/
      - test-alpine:
          requires:
            - build-alpine
          filters:
            tags:
              only: /.*/

      # Packaging: python
      #
      # Build the python package
      - package-back:
          requires:
            - test-front
            - test-back-mysql
            - test-back-postgresql
            - test-alpine
            - build-front-production
          filters:
            tags:
              only: /.*/

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed and
      # it has been tagged with a tag starting with the letter v
      - hub:
          requires:
            - test-front
            - test-back-mysql
            - test-back-postgresql
            - test-alpine
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/

      # PyPI publication.
      #
      # Publish python package to PYPI only if all build, lint and test jobs
      # succeed and it has been tagged with a tag starting with the letter v
      - pypi:
          requires:
            - package-back
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      # NPM publication.
      #
      # Publish frontend package to NPM only if all build, lint and test jobs
      # succeed and it has been tagged with a tag starting with the letter v
      - npm:
          requires:
            - lint-front-tslint
            - lint-prettier
            - test-front
            - test-front-package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
