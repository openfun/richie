////
/// Structural rules for Card types
////

///
/// Function to return every Card element selectors depending on methodology
/// and possibly parent.
///
/// @arg {String} $methodology [null]
///   If value is "bem", object element selectors will be created with BEM
///   methodology and starting from given `$parent`. Any other value is trigger
///   natural methodology (default behavior).
///
/// @arg {Selector} $parent [&]
///   Parent selector used only with BEM methodology to define element
///   selectors. Default is parent reference `&`. Usually you don't have to
///   change this unless your are working inside a modifier or a sub child
///   element.
///
@function f-o-card-selectors($methodology, $parent: "&") {
    @return (
        "link-modifier": if($methodology=="bem", "#{$parent}--link", "&.link"),
        "media": if($methodology=="bem", "#{$parent}__media", ".media"),
        "content": if($methodology=="bem", "#{$parent}__content", ".content"),
        "wrapper": if($methodology=="bem", "#{$parent}__content__wrapper", ".wrapper"),
        "foot": if($methodology=="bem", "#{$parent}__footer", ".footer")
    );
}


///
/// Card container properties
///
@mixin m-o-card_container(
    $direction: "vertical",
    $margin: null,
    $padding: null,
    $border: null,
    $background: null
){
    display: flex;
    margin: $margin;
    padding: $padding;
    background: $background;
    border: $border;

    @if $direction == "vertical" {
        flex-direction: column;
    } @else {
        flex-direction: row;
    }
}


///
/// Card media element properties
///
/// Default behavior for media element is to be inserted in a vertical flow
/// where it take the full available width. Defining a value for `$width`
/// argument trigger the horizontal flow behavior.
///
@mixin m-o-card__media(
    $width: null,
    $margin: null,
    $padding: null,
    $border: null,
    $background: null,
    $caption-width: null,
    $caption-margin: null,
    $caption-padding: null,
    $caption-fontsize: null,
    $caption-textalign: null,
    $caption-border: null,
    $caption-background: null,
    $constraint: true
){
    display: block;
    position: relative;
    margin: $margin;
    padding: $padding;
    background: $background;
    border: $border;

    // Media element size and flow direction
    @if ($width and $width > 0) {
        // Horizontal
        @include sv-flex(1, 0, $width);
    } @else {
        // Vertical
        @include sv-flex(0, 1, 0%, $max: false);
        max-width: none;
    }

    // Media element constraint
    @if ($constraint) {
        img,
        iframe{
            display: block;
            width: 100%;
            max-width: 100%;
            height: auto;
        }
    }

    &__caption{
        @if ($caption-width) {
            position: absolute;
            left: (100% - $caption-width) / 2;
            width: $caption-width;
            @if ($caption-fontsize) {
                bottom: -$caption-fontsize;
            } @else {
                bottom: 0;
            }
        }
        margin: $caption-margin;
        padding: $caption-padding;
        font-size: $caption-fontsize;
        line-height: 1.1;
        text-align: $caption-textalign;
        background: $caption-background;
        border: $caption-border;
    }
}


///
/// Card footer item
///
@mixin m-o-card__foot__item(
    $width: null,
    $margin: null,
    $padding: null,
    $justifycontent: null,
    $alignitems: null,
    $fontsize: null,
    $lineheight: null,
    $textcolor: null,
    $background: null,
) {
    @if $width != null {
        @include sv-flex-cell-width($width);
    }
    display: flex;
    justify-content: $justifycontent;
    align-items: $alignitems;
    margin: $margin;
    padding: $padding;
    font-size: $fontsize;
    line-height: $lineheight;
    color: $textcolor;
    background: $background;
}


///
/// Full card structure including every available elements.
///
/// Flow can be either horizontal or vertical depending `$media-width`.
///
/// Best usage is in a flexbox grid so every cards on the same row have equal
/// height and their content is correctly aligned.
///
/// @arg {Number} $media-width [null]
///   If not null and more than zero, trigger horizontal flow behavior.
///
/// @arg {Number} $triangle-size [null]
///   If not null and more than zero, trigger a CSS triangle absolutely
///   positionned relatively to 'content' element.
///
/// @arg {String} $methodology [null]
///   If value is "bem", object element selectors will be created with BEM
///   methodology and starting from given `$parent`. Any other value is trigger
///   natural methodology (default behavior).
///
/// @arg {Selector} $parent [&]
///   Parent selector used only with BEM methodology to define element
///   selectors. Default is parent reference `&`. Usually you don't have to
///   change this unless your are working inside a modifier or a sub element.
///
@mixin m-o-card(
    $margin: null,
    $padding: null,
    $border: null,
    $background: null,
    $media-width: null,
    $media-margin: null,
    $media-padding: null,
    $media-background: null,
    $media-border: null,
    $media-constraint: true,
    $caption-width: null,
    $caption-margin: null,
    $caption-padding: null,
    $caption-fontsize: null,
    $caption-textalign: null,
    $caption-border: null,
    $caption-background: null,
    $content-margin: null,
    $content-padding: null,
    $content-background: null,
    $content-border: null,
    $wrapper-margin: null,
    $wrapper-padding: null,
    $wrapper-background: null,
    $wrapper-border: null,
    $foot-divider: null,
    $triangle-size: null,
    $triangle-color: null,
    $triangle-direction: "up",
    $methodology: "standard",
    $parent: "&"
) {
    // Get element selectors depending methodology
    $selectors: f-o-card-selectors($methodology, $parent);
    $selector-link-modifier: map-get($selectors, "link-modifier");
    $selector-media: map-get($selectors, "media");
    $selector-content: map-get($selectors, "content");
    $selector-wrapper: map-get($selectors, "wrapper");
    $selector-foot: map-get($selectors, "foot");

    // Flow direction depending media width value
    @include m-o-card_container(
        $direction: if(($media-width and $media-width > 0), "horizontal", "vertical"),
        $margin: $margin,
        $padding: $padding,
        $border: $border,
        $background: $background
    );

    // Link modifier disable default common link element behaviors
    #{$selector-link-modifier}{
        color: inherit;

        &:hover{
            color: inherit;
            text-decoration: none;
        }
    }

    // Media element
    #{$selector-media}{
        @include m-o-card__media(
            $width: $media-width,
            $margin: $media-margin,
            $padding: $media-padding,
            $border: $media-border,
            $background: $media-background,
            $caption-width: $caption-width,
            $caption-margin: $caption-margin,
            $caption-padding: $caption-padding,
            $caption-fontsize: $caption-fontsize,
            $caption-textalign: $caption-textalign,
            $caption-border: $caption-border,
            $caption-background: $caption-background,
            $constraint: $media-constraint
        );
    }

    #{$selector-content}{
        display: flex;
        position: relative;
        @include sv-flex(1, 1, 0%, $max: false);
        flex-direction: column;
        justify-content: space-between;
        margin: $content-margin;
        padding: $content-padding;
        background: $content-background;
        border: $content-border;

        @if $triangle-size and $triangle-size > 0{
            &::before{
                @include m-o-triangle(
                    $triangle-size,
                    $triangle-color,
                    $triangle-direction,
                    $absolute: true
                );
            }
        }
    }

    #{$selector-wrapper}{
        margin: $wrapper-margin;
        padding: $wrapper-padding;
        background: $wrapper-background;
        border: $wrapper-border;

        p:last-child{
            margin-bottom: 0;
        }
    }

    #{$selector-foot}{
        margin-top: $foot-divider;
    }
}
