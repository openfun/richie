include:
  - docker-compose-${ACTIVATED_DB:-postgres}.yml
services:
  elasticsearch:
    image: {{cookiecutter.elasticsearch_image_name}}
    environment:
      - discovery.type=single-node
    env_file:
      - "env.d/development"
      - "env.d/${ACTIVATED_DB:-postgres}"
    ports:
      - "9220:9200"
    healthcheck:
      test: ["CMD", "echo", "''", ">", "/dev/tcp/127.0.0.1/9200", "||", "exit", "1"]
      interval: 1s
      timeout: 2s
      retries: 300
  app-dev:
    build:
      context: .
      target: development
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
        SITE: ${RICHIE_SITE:?}
    image: "${RICHIE_SITE:?}:development"
    environment:
      - DJANGO_SETTINGS_MODULE=${RICHIE_SITE:?}.settings
      - DJANGO_CONFIGURATION=Development
      - RICHIE_ES_INDICES_PREFIX=richie_${RICHIE_SITE:?}
    env_file:
      - ".env"
      - "env.d/development"
      - "env.d/${ACTIVATED_DB:-postgres}"
    networks:
      - default
      - lms_outside
    ports:
      - "8070:8000"
    volumes:
      - "./sites/${RICHIE_SITE:?}/src/backend:/app"
      - "./data/media/${RICHIE_SITE:?}:/data/media"
    depends_on:
      - "${ACTIVATED_DB:-postgres}"
      - "elasticsearch"
      - "redis-sentinel"
    user: ${DOCKER_USER:-1000}

  app:
    build:
      context: .
      target: production
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
        SITE: ${RICHIE_SITE:?}
    # We tag our images with the current commit sha1 in the CI to make them
    # unique and avoid collisions in parallel builds.
    image: "${RICHIE_SITE:?}:production"
    environment:
      - DJANGO_SETTINGS_MODULE=${RICHIE_SITE:?}.settings
      - DJANGO_CONFIGURATION=ContinuousIntegration
      - RICHIE_ES_INDICES_PREFIX=richie_${RICHIE_SITE:?}
    env_file:
      - ".env"
      - "env.d/development"
      - "env.d/${ACTIVATED_DB:-postgres}"
    networks:
      - default
      - lms_outside
    volumes:
      - ./data/media/${RICHIE_SITE:?}:/data/media
    depends_on:
      - "${ACTIVATED_DB:-postgres}"
      - "elasticsearch"
      - "redis-sentinel"
    user: ${DOCKER_USER:-1000}

  nginx:
    build:
      context: .
      target: nginx
      args:
        DOCKER_USER: ${DOCKER_USER:-1000}
        NGINX_IMAGE_NAME: ${NGINX_IMAGE_NAME:-{{cookiecutter.nginx_image_name}}}
        NGINX_IMAGE_TAG: ${NGINX_IMAGE_TAG:-{{cookiecutter.nginx_image_tag}}}
        SITE: ${RICHIE_SITE:?}
    image: "${RICHIE_SITE:?}-nginx:production"
    ports:
      - "8081:8081"
    volumes:
      - ./docker/files/etc/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./data/media/${RICHIE_SITE:?}:/data/media:ro
    depends_on:
      - app

  dockerize:
    image: jwilder/dockerize

  node:
    image: node:20.11
    working_dir: /app/src/frontend
    user: ${DOCKER_USER:-1000}
    volumes:
      - ./sites/${RICHIE_SITE:?}:/app

  terraform-state:
    image: hashicorp/terraform:latest
    env_file: env.d/aws
    user: ${DOCKER_USER:-1000}
    working_dir: /app
    volumes:
      - ./aws/create_state_bucket:/app

  terraform:
    image: hashicorp/terraform:0.12.31
    environment:
      - TF_VAR_SITE=${RICHIE_SITE:?}
      - TF_DATA_DIR=/config
    env_file: env.d/aws
    user: ${DOCKER_USER:-1000}
    working_dir: /app
    volumes:
      - ./aws:/app
      - ./sites/${RICHIE_SITE:?}/aws:/config

  redis-sentinel:
    image: docker.io/bitnami/redis-sentinel:6.0-debian-10
    environment:
      - REDIS_MASTER_HOST=redis-primary
    depends_on:
      - redis-primary

  redis-primary:
    image: docker.io/bitnami/redis:6.0-debian-10
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_REPLICATION_MODE=master

networks:
  lms_outside:
    driver: bridge
    name: "${RICHIE_LMS_NETWORK:-edx_outside}"
